# updated_streamlit_app_fixed.py
# üö¶ Trafik i≈üareti tanƒ±ma (robust + crop)
# - Model: robust_cnn32_best.keras
# - Preprocess: channel_stats.json
# - Crop: kƒ±rmƒ±zƒ±/mavi alanlardan i≈üareti bulup kƒ±rpma

import streamlit as st
import tensorflow as tf
import numpy as np
import cv2
from PIL import Image
import os, json
from datetime import datetime

st.set_page_config(page_title="Robust Trafik ƒ∞≈üareti Tanƒ±ma", page_icon="üö¶", layout="wide")

CLASS_NAMES = [
    'Hƒ±z limiti (20km/h)', 'Hƒ±z limiti (30km/h)', 'Hƒ±z limiti (50km/h)', 'Hƒ±z limiti (60km/h)',
    'Hƒ±z limiti (70km/h)', 'Hƒ±z limiti (80km/h)', 'Hƒ±z limiti (80km/h) sonu', 'Hƒ±z limiti (100km/h)',
    'Hƒ±z limiti (120km/h)', 'Ge√ßme yasaƒüƒ±', 'Kamyonlara ge√ßme yasaƒüƒ±', 'Kav≈üak √∂ncelik yolu',
    '√ñncelikli yol', 'Yol ver', 'Dur', 'Ara√ß trafiƒüine kapalƒ±', 'Kamyonlara kapalƒ±', 'Giri≈ü yasak',
    'Genel tehlike', 'Tehlikeli sol viraj', 'Tehlikeli saƒü viraj', '√áifte viraj', 'Engebeli yol',
    'Kaygan yol', 'Saƒüda daralan yol', 'Yol √ßalƒ±≈ümasƒ±', 'Trafik ƒ±≈üƒ±klarƒ±', 'Yaya ge√ßidi',
    '√áocuklar', 'Bisiklet ge√ßidi', 'Buzlu/karlƒ± yol', 'Vah≈üi hayvan ge√ßidi', 
    'Hƒ±z ve ge√ßme yasaƒüƒ± sonu', 'Saƒüa d√∂n√º≈ü zorunlu', 'Sola d√∂n√º≈ü zorunlu', 'D√ºz gitme zorunlu',
    'D√ºz git veya saƒüa d√∂n', 'D√ºz git veya sola d√∂n', 'Saƒüdan ge√ßme zorunlu', 'Soldan ge√ßme zorunlu',
    'Ada saƒüdan', 'Ada soldan', 'Zorunlu y√∂n'
]

# -------------------------
# Model y√ºkleme
# -------------------------
@st.cache_resource
def load_model():
    model_files = [f for f in os.listdir('.') if f.endswith('.keras') or f.endswith('.h5')]
    if not model_files:
        st.error("‚ùå Model dosyasƒ± bulunamadƒ±.")
        return None, None
    preferred = [f for f in model_files if "robust" in f.lower() or "best" in f.lower()]
    chosen = max(preferred or model_files, key=os.path.getctime)
    model = tf.keras.models.load_model(chosen)
    return model, chosen

def get_channel_stats():
    if os.path.exists("channel_stats.json"):
        try:
            with open("channel_stats.json","r", encoding="utf-8") as f:
                js = json.load(f)
            return js.get("means",[0.3403,0.3121,0.3214]), js.get("stds",[0.2724,0.2608,0.2669])
        except Exception:
            pass
    return [0.3403,0.3121,0.3214], [0.2724,0.2608,0.2669]

# -------------------------
# Detection + Crop
# -------------------------
def find_and_crop_sign(img_bgr, target_size=32):
    """Renk maskesi ile en b√ºy√ºk kƒ±rmƒ±zƒ±/mavi i≈üareti bul ve crop et"""
    hsv = cv2.cvtColor(img_bgr, cv2.COLOR_BGR2HSV)

    # kƒ±rmƒ±zƒ± maske (2 aralƒ±k)
    lower_red1, upper_red1 = np.array([0,70,50]), np.array([10,255,255])
    lower_red2, upper_red2 = np.array([160,70,50]), np.array([180,255,255])
    mask_red = cv2.inRange(hsv, lower_red1, upper_red1) | cv2.inRange(hsv, lower_red2, upper_red2)

    # mavi maske
    lower_blue, upper_blue = np.array([100,70,50]), np.array([130,255,255])
    mask_blue = cv2.inRange(hsv, lower_blue, upper_blue)

    mask = cv2.bitwise_or(mask_red, mask_blue)
    contours, _ = cv2.findContours(mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

    if contours:
        c = max(contours, key=cv2.contourArea)
        x,y,w,h = cv2.boundingRect(c)
        if w*h > 200:  # √ßok k√º√ß√ºkse alma
            cropped = img_bgr[y:y+h, x:x+w]
            if cropped.size > 0:
                return cv2.resize(cropped, (target_size, target_size), interpolation=cv2.INTER_AREA)

    # fallback: merkezden kare crop
    h,w,_ = img_bgr.shape
    m = min(h,w)
    sx, sy = (w-m)//2, (h-m)//2
    cropped = img_bgr[sy:sy+m, sx:sx+m]
    return cv2.resize(cropped, (target_size, target_size), interpolation=cv2.INTER_AREA)

# -------------------------
# Preprocess
# -------------------------
def robust_preprocess_image(pil_image, img_size=32):
    img_bgr = cv2.cvtColor(np.array(pil_image.convert("RGB")), cv2.COLOR_RGB2BGR)
    sign = find_and_crop_sign(img_bgr, img_size)

    img = sign.astype("float32")/255.0
    means, stds = get_channel_stats()
    for c in range(3):
        img[:,:,c] = (img[:,:,c] - means[c]) / (stds[c] + 1e-8)
    return np.expand_dims(img,0), img

# -------------------------
# Streamlit UI
# -------------------------
def main():
    st.title("üõ°Ô∏è Robust Trafik ƒ∞≈üareti Tanƒ±ma")
    model, model_name = load_model()
    if model is None: st.stop()

    uploaded = st.file_uploader("Bir g√∂r√ºnt√º y√ºkleyin", type=["jpg","jpeg","png","bmp"])
    if uploaded is not None:
        image = Image.open(uploaded)
        st.image(image, caption="Y√ºklenen g√∂r√ºnt√º", use_column_width=True)

        if st.button("Tahmin Et"):
            x, vis = robust_preprocess_image(image, 32)
            pred = model.predict(x, verbose=0)[0]
            cls = int(np.argmax(pred))
            conf = float(np.max(pred))
            st.subheader(f"Tahmin: {CLASS_NAMES[cls]} ({conf*100:.1f}%)")
            st.image((vis*255).astype(np.uint8), caption="ƒ∞≈ülenmi≈ü crop (32x32)", width=160)

    st.caption(f"G√ºncelleme: {datetime.now().strftime('%Y-%m-%d')} | Model: {model_name}")

# streamlit run updated_streamlit_app_fixed.py
if __name__ == "__main__":
    main()
